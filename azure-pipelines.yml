# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'InstallAndTestClient'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python setup.py install
      dynaconf init -v FOO=running_on_travis -y
      dynaconf write toml -v OTHERVALUE=Hello_Travis -y
      dynaconf list | grep -c running_on_travis
      dynaconf list | grep -c Hello_Travis
      dynaconf --version
    displayName: 'Install and test cli'

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: source .ci/install_dev.sh
    displayName: 'Install dependencies'

  - script: source .ci/test.sh
    displayName: 'tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Examples'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: source .ci/install_dev.sh
    displayName: 'Install dependencies'

  - script: make test_examples
    displayName: 'Functional tests for examples and frameworks'

- job: 'Redis'
  variables:
    REDIS_ENABLED_FOR_DYNACONF: true
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      docker pull redis
      docker run -d -p 6379:6379 redis
      docker ps -a
    displayName:  'Run Redis Container'

  - script: source .ci/install_dev.sh
    displayName: 'Install dependencies'

  - script: make test_redis
    displayName: 'Functional test for redis'


- job: 'Vault'
  variables:
    VAULT_ENABLED_FOR_DYNACONF: true
    VAULT_TOKEN_FOR_DYNACONF: myroot
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      docker pull vault
      docker run -d -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -p 8200:8200 vault
      docker ps -a
    displayName:  'Run Vault Container'

  - script: source .ci/install_dev.sh
    displayName: 'Install dependencies'

  - script: make test_vault
    displayName: 'Functional test for vault'

- job: 'Publish'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'
